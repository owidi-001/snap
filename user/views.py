import random

from django.contrib.auth import authenticate
from django.shortcuts import render
from django.template.loader import render_to_string
from django.utils.encoding import force_bytes
from django.utils.http import urlsafe_base64_encode
from rest_framework import status
from rest_framework.permissions import AllowAny
from rest_framework.renderers import TemplateHTMLRenderer, StaticHTMLRenderer
from rest_framework.response import Response
from rest_framework.views import APIView

# forms
# models
from .models import User
from .schema import RegistrationSchema, LoginSchema, ResetPasswordSchema
# serializers
from .serializers import UserSerializer, RegisterSerializer, LoginSerializer, PasswordResetSerializer
from .token_generator import password_reset_token


class RegisterView(APIView):
    """
        The user fills the required parameters namely (email,password).
        The form is checked for validity and user saved if valid otherwise relevant exception is thrown.
        """
    schema = RegistrationSchema()
    permission_classes = [AllowAny]

    def post(self, request):
        serializer = RegisterSerializer(data=request.data)

        if serializer.is_valid():
            serializer.save()

            return Response(serializer.data, status=status.HTTP_201_CREATED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class LoginView(APIView):
    """
    User logs in with the required credentials
    """
    schema = LoginSchema()
    renderer_classes = [TemplateHTMLRenderer]
    template_name = 'auth/login.html'

    def get(self, request):
        return Response({'messages': "Nothing"})

    def post(self, request):

        serializer = LoginSerializer(data=request.data)
        if serializer.is_valid():
            user = authenticate(email=serializer.data.get("email"), password=serializer.data.get("password"))
            if user:
                serializer = UserSerializer(user)
                return Response(serializer.data, status=status.HTTP_200_OK)
            return Response({"Message": "Please provide valid credentials"}, status=status.HTTP_404_NOT_FOUND)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)


class UpdateUserView(APIView):
    """
    Updates user credentials
    """

    renderer_classes = [StaticHTMLRenderer,TemplateHTMLRenderer]
    template_name = 'auth/signup.html'

    def get(self, request):
        return render(request, template_name=self.template_name)

    def put(self, request):
        user = request.user
        serializer = UserSerializer(data=request.data)

        if user and serializer.is_valid():
            serializer.save()
            return Response({"message": "User updated"}, status=status.HTTP_202_ACCEPTED)
        return Response(serializer.errors, status=status.HTTP_400_BAD_REQUEST)

    def delete(self, request):
        user = request.user

        if user:
            user.delete()
            return Response(status=status.HTTP_204_NO_CONTENT)
        return Response({"message": "Deletion failed"}, status=status.HTTP_400_BAD_REQUEST)


class ResetPasswordView(APIView):
    """
    User gets to reset a forgotten password using their registration email
    """
    schema = ResetPasswordSchema()

    def post(self, request):
        """
        Request pass word reset by providing an email.

        short code to be used to change password
        short code will be sent to the user which will be used to reset the password
        instead of sending long password reset token generated by django PasswordResetGenerator
        """
        serializer = PasswordResetSerializer(data=request.data)
        if serializer.is_valid():
            email = serializer.data.get("email")
            user = User.objects.filter(
                email=email).first()

            if user:
                token = password_reset_token.make_token(user)
                uid64 = urlsafe_base64_encode(force_bytes(user.pk))
                scheme = request.build_absolute_uri().split(":")[0]
                path = f"{scheme}://{request.get_host()}/auth/reset/{uid64}/{token}"
                subject = "Password Reset"
                print(path)
                message = render_to_string('account/password_reset_mail.html', {
                    'user': user,
                    "path": path
                })

                user.email_user(subject=subject, message=message)

                return Response({"message": "Check your email to reset the pasword"}, status=status.HTTP_200_OK)
            return Response({"message": "User with this email not found"}, status=status.HTTP_404_NOT_FOUND)

    @staticmethod
    def gen_token():
        token = ""
        for _ in range(6):
            token += "1234567890"[random.randint(0, 9)]
        return int(token)
